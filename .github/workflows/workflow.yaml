name: Build Filter & modify

on:
  schedule:
    # 8H事に自動実行
    - cron: '3 1,9,17 * * *'

  # 手動実行を許可
  workflow_dispatch:

env:
  NODE_VERSION: 18.x

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      # ビルドで使う最新フィルタを取得（URL直接指定だとconfiguration.json記述が長くなる為）
      - name: Get Latest File
        run: |
          # Adguard 公式フィルタを取得
          curl -sSfL https://raw.githubusercontent.com/AdguardTeam/AdGuardSDNSFilter/master/Filters/exclusions.txt -o Filters/exclusions.txt
          # host2ch を取得
          curl -sSL https://pastebin.com/raw/XF5FP2rG -o Filters/tmp_host2ch.txt || true
          
      # フィルタビルド実行
      - name: Build Filter
        run: |
          # 依存関係をインストール
          yarn install
          # コマンドコケたらスクリプト停止
          set -e
          # フィルタビルド実行
          ./node_modules/.bin/hostlist-compiler -c configuration.json -o Filters/main_filter.txt --verbose
          
      # 生成直後のフィルタは一応残す
      - name: Original Filter BackUP
        run: |
          cp Filters/main_filter.txt Filters/before_modify.txt
          
      # クリーンアップ前の異常行を抽出
      - name: Before Bad Filter
        run: |
          awk '
          #コメント行を除外し、フィルタ形式じゃない行を抽出
          !/^!/ && !/^\|\|/ && !/^@@/ {
            print
          }
          ' Filters/main_filter.txt | sort -u > Filters/tmp_before_bad_filter.txt
          
      # クリーンアップ前の異常フィルタを一部修正
      - name: Before Bad Filter modify
        run: |          
          awk '
          # コメント行スキップ
          /^#/ {
            next
          }
          # ". * $ ^" を除いた正規表現を含む行をスキップ
          /[+?(){}\\]/ {
            next
          }
          {
            # 行末の ^ がある場合削除
            sub(/\^+$/, "")
            # 行末が ^ でない場合、^ を追加
            if (!/\^$/) {
              $0 = $0 "^"
            }
          }
          # 先頭"://"を修正
          /^:[/][/]/ {
            sub(/^:[/][/]/, "||")
            print
            next
          }
          # 先頭がドットの行を修正
          /^\./ {
            sub(/^\./, "||")
            print
            next
          }
          # その他の行
          {
            print "||" $0
          }
          ' Filters/tmp_before_bad_filter.txt | sort -u > Filters/tmp_before_bad_filter_fix.txt
          # 修正したフィルタをメインフィルタに追記
          cat Filters/tmp_before_bad_filter_fix.txt >> Filters/main_filter.txt
          
      # フィルタ部分をクリーンアップ
      - name: Filter Clean up
        run: |
          awk '
          #コメント行,正規表現が絡む行を除外し、フィルタ形式の行のみ対象
          !/^!/ && !/\// && (/^\|\|/ || /^@@/) {
            # $badfilterを@@に変換(本来この処理は正しいとは言えないがDNSフィルタなのでとりあえずこうする)
            if ($0 ~ /\$badfilter/) {
              sub(/\$badfilter/, "")
              sub(/^\|\|/, "@@||")
            }
            # @@ではじまり、かつ @@||ではない行は変換ミスだと思われるので修正
            if ($0 ~ /^@@/ && $0 !~ /^@@\|\|/) {
              sub(/^@@\|?/, "@@||")
            }
            # $important 以外の修飾子削除
            if ($0 ~ /\$.*$/ && $0 !~ /\$important$/) {
              sub(/\$.*$/, "")
            }
            # @@行の最終処理
            if (/^@@/) {
              # 行末の | がある場合削除
              sub(/\|+$/, "")
              # 行末が | でない場合、^ を追加
              if (!/\|$/) {
                $0 = $0 "|"
              }
            }
            # ||行の最終処理
            if (!/^@@/) {
              # 行末の ^ がある場合削除
              sub(/\^+$/, "")
              # 行末が ^ でない場合、^ を追加
              if (!/\^$/) {
                $0 = $0 "^"
              }
            }
            print
          }
          ' Filters/main_filter.txt | sort -u > Filters/tmp_body_filter.txt
          
      # host2chのファイルを整形してフィルタへ追記
      - name: Convert host2ch
        run: |
          # ファイルのダウンロードに失敗していた場合は何もしない
          if [ -f "Filters/tmp_host2ch.txt" ]; then
            awk '
            # コメントと空行をスキップ
            /^#/ || NF == 0 {
              next
            }
            {
              # AdGuard形式に変換
              print "||" $2 "^"
            }
            ' Filters/tmp_host2ch.txt | sort -u >> Filters/tmp_body_filter.txt
          fi
        
      # massdnsチェック用にドメインのみ抽出
      - name: Grep Domain
        run: |
          # ブロックルールの抽出
          awk '
          /^@@/ {
            sub(/^@@\|\|/, "")
            sub(/\^\|$/, "")
            print > "Filters/tmp_domains_only_before_check_allow.txt"
          }
          # || で始まる行を処理
          /^\|\|/ {
            # || と ^ を削除してドメイン部分だけ残す
            sub(/^\|\|/, "")
            sub(/\^$/, "")
            print > "Filters/tmp_domains_only_before_check_block.txt"
          }
          ' Filters/tmp_body_filter.txt

      # massdns環境構築、DNSアドレスの存在確認実行
      - name: massdns Check
        run: |
          sudo apt-get update
          sudo apt-get install -y git make gcc
          git clone https://github.com/blechschmidt/massdns.git
          cd massdns
          make  # massdns をビルド

          # リゾルバファイル格納フォルダを作成
          mkdir -p lists
          
          # massdns用に信頼できるリゾルバリストを取得
          curl -sf https://public-dns.info/nameservers.txt > lists/resolvers.txt || true
          
          # オリジナルからの取得に失敗したときはリポから取得
          if [ ! -s lists/resolvers.txt ]; then
            curl -sSfL https://raw.githubusercontent.com/DNSet/public-dns/master/resources/public-dns/nameservers.txt -o lists/resolvers.txt
          fi
          
          # massdnsで許可リストに記載のあるドメインが存在しているかを確認
          ./bin/massdns -r lists/resolvers.txt -t A -o S \
            -w ../Filters/tmp_Exist_allow_raw.txt ../Filters/tmp_domains_only_before_check_allow.txt || true
            
          # massdnsでブロックリストに記載のあるドメインが存在しているかを確認
          ./bin/massdns -r lists/resolvers.txt -t A -o S \
            -w ../Filters/tmp_Exist_block_raw.txt ../Filters/tmp_domains_only_before_check_block.txt || true

          # 中身の簡易的な確認
          head ../Filters/tmp_Exist_allow_raw.txt
          head ../Filters/tmp_Exist_block_raw.txt
          
      # 存在するドメインのみ書き出す
      - name: Check Result modify
        run: |
          # 許可リストとブロックリストを比較し、許可リストに記載ある行をブロックリストから除外
          awk '
            # 1ファイル目の処理（許可リスト側）
            FNR==NR {
              # 行末の「.」を削除して通常のドメイン形式に整形
              sub(/\.$/, "", $1)
              # 仮想配列に格納（後でブロックリストと比較する用）
              allow[$1] = 1
              # 許可側は普通に書き出す
              print "@@||" $1 "^|"
              next
            }
            # 2ファイル目の処理（ブロックリスト側）
            {
              # 同様に整形
              sub(/\.$/, "", $1)
              # 仮想配列に含まれていない（≠許可リスト）場合のみ出力
              if (!($1 in allow)) {
                print "||" $1 "^"
              }
            }
            ' Filters/tmp_Exist_allow_raw.txt Filters/tmp_Exist_block_raw.txt | sort -u > Filters/tmp_body_filter_Complete.txt
          
      # ヘッダー部分の作成
      - name: Create Header
        run: |
        
          # 現在の日付と時間をJST形式で取得
          Now="$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST')"
          Today="$(TZ=Asia/Tokyo date '+%Y%m%d')"

          # ヘッダーを追記するだけ
          awk -v ver="${Today}" -v modifi="${Now}" '
          BEGIN {
            print "! Title: AdGuard_DNS_Filter_for_myself"
            print "! Description: AdGuard DNS filter Customized by monsivamon"
            print "! Version: "ver
            print "! Homepage: https://github.com/monsivamon/AdGuard_DNS_Filter_for_myself"
            print "! License: https://github.com/monsivamon/AdGuard_DNS_Filter_for_myself/blob/master/LICENSE"
            print "! Last modified: "modifi
            print "!"
          }
          {
            print
          }
          ' Filters/tmp_body_filter_Complete.txt > Filters/main_filter.txt

      # 中間ファイルの削除
      - name: Unnecessary File Cleanup
        run: |
          # 確認用
          ls -la Filters
          # 一時ファイル削除
          rm Filters/tmp*.txt
          
      # 完成フィルタから異常フィルタを抽出
      - name: Bad Filter Check
        run: |
          awk '
          #コメント行を除外
          !/^!/ {
            # @@||もしくは||で始まらないフィルタを抽出
            if ($0 !~ /^@@\|\|/ && $0 !~ /^\|\|/) {
              print
            }
          } ' Filters/main_filter.txt | sort -u > Filters/bad_filter.txt
          
          # ファイル行数が0の場合、bad_filter.txtを削除
          if [ $(wc -l < Filters/bad_filter.txt) -eq 0 ]; then
            rm Filters/bad_filter.txt
          fi

      # AdAway Host方式に変換    
      - name: Convert Adaway Host
        run: |
        
          # 現在の日付と時間をJST形式で取得
          Now="$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST')"
          Today="$(TZ=Asia/Tokyo date '+%Y%m%d')"
          
          # ヘッダー作成しながらadguardフィルタをhost方式に変換
          awk -v ver="${Today}" -v modifi="${Now}" '
          BEGIN {
            print "# Title: AdGuard_DNS_Filter_for_myself for AdAway"
            print "# Description: Auto Converted from AdGuard_DNS_Filter_for_myself"
            print "# Version: "ver
            print "# Homepage: https://github.com/monsivamon/AdGuard_DNS_Filter_for_myself"
            print "# License: https://github.com/monsivamon/AdGuard_DNS_Filter_for_myself/blob/master/LICENSE"
            print "# Last modified: "modifi
            print ""
          }
          # ブロックリストのみ変換の対象とする
          $0 ~ /^\|\|/ {
            gsub(/^\|\|/, "", $0)
            gsub(/\^.*$/, "", $0)
            print "0.0.0.0", $0
          }
          ' Filters/main_filter.txt > Filters/main_filter_for_adaway.txt

      # フィルタをアップロード
      - name: Upload new filter
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          TODAY="$(TZ=Asia/Tokyo date '+%Y-%m-%d %H:%M JST')"
          # 生成フィルタをアップロード
          git add Filters/*.txt
          # いつアップロードしたかわかるようにする
          git commit -m "chore: update main filter - ${TODAY}"
          git push origin master
